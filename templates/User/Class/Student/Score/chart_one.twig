{% set i18n = dictionary.class.tab_one.chart_one %}

{% set labels = [] %}
{% set labels_color = [] %}
{% set values = [] %}
{% set colors = {
    submittedWork: "#3d2aa2",
    activitiesResults : "#1976d2",
    consultedResources : "#03a9f4",
    clicksCount : "#4dd0e1",
    weekRegularity : "#e53935",
    dayRegularity : "#ec407a",
    followedAdvices : "#e040fb",
    forumQuestions: "#66bb6a",
    forumAnswers: "#7cb342",
    helpAsked: "#558b2f",
   }
%}
    <div class="row">
        <div id='chart_one'>
        <div class="score-chart-padding">
            <div class="ui grid">
                <div class="eight wide column">
                    <div class="chart-container">
                        <canvas id="activity_chart"></canvas>
                    </div>

                    <div class="hide" id="score-success">
                        <h3 style="text-align:center" id="score-value">{{ i18n.objective_probability}}</h3>
                    </div>
                </div>
                <div class="one wide column"></div>
                <div class="seven wide column">
                    {% for legend in i18n.legend %}
                        <p class="legend-category" align="center">
                            <strong>{{ legend.name }}</strong>
                        </p>
                        <hr>
                        {% for key, value in legend.labels %}
                            {% if indicators[key] is defined and indicators[key] is not null %}
                                <span style="background-color: {{ colors[key] }};" class="dot"></span> &nbsp; {{ value }}
                                <br>
                                {% set labels = labels|merge([value]) %}
                                {% set labels_color = labels_color|merge([colors[key]]) %}
                                {% set values = values|merge([indicators[key]]) %}
                            {% endif %}
                        {% endfor %}
                    {% endfor %}

                </div>
            </div>
        </div>

        <br>
        <div class="row">
            <div class="ui stackable grid">
                <div class="four wide column">
                    <div class="row">
                        <div id='last-week-progression' class="ui statistic">
                            <div class="value">
                                <i id="growth-caret" class="green caret up icon"></i>
                                <span id="score-difference">0</span>%
                            </div>
                            <div class="label"> {{ i18n.since_last_week }} </div>
                        </div>
                    </div>
                </div>
                <div class="six wide column">
                    <div class="row"> {{ i18n.personal_objective }} <i class="ui teal info circle icon"></i></div>
                    <div class="row">
                        <br>
                        <div class="ui fluid selection dropdown">
                            <input type="hidden" name="objective">
                            <i class="dropdown icon"></i>
                            <div class="default text">{{ i18n.set_objective }}</div>
                            <div class="menu">
                                <div class="item" data-value="10">10</div>
                                <div class="item" data-value="12">12</div>
                                <div class="item" data-value="14">14</div>
                                <div class="item" data-value="16">16</div>
                                <div class="item" data-value="18">18</div>
                                <div class="item" data-value="20">20</div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="one wide column"></div>
               <!-- <div class="five wide column">
                    <div class="row"></div>
                    <div class="row">
                        <button class="teal ui button dispute-score">{{ i18n.dispute_score }}</button>
                    </div>
                </div> -->
            </div>
            <p class="score-legal-notice">{{ i18n.disclaimer }}</p>
        </div>
    </div>
</div>


{% block javascripts %}
<script>
    $(document).ready( () => {

        let scores = {{ scores|json_encode|raw }};
        let activityData = {{ values|json_encode|raw }};
        let activityDataVelocity = {{ weight|json_encode|raw }};
        let labels = {{ labels|json_encode|raw }};
        let label_colors = {{ labels_color|json_encode|raw }};

        $('.selection.dropdown > .menu').on('click', function() {
            updateObjective(scores);
        });

        // Init.
        const pieChart = createPieChart('#activity_chart', labels, label_colors, activityData, activityDataVelocity);
        let difference = calculateScoreEvolution(scores, 10);
        updateScoreEvolution(difference);

    });



    /**
     * Update the objective of a user (graph + text)
     *
     * @param scores
     */
     updateObjective = (scores) => {
         $('#score-success').removeClass('hide');
         let target = $('.selection.dropdown').dropdown('get value');
         $('#score-value').text(
             (i,txt) => {
                 return txt.replace(/\d+/, scores['{{ date }}'][target])
             }
         );
         let difference = calculateScoreEvolution(scores, target);
         updateScoreEvolution(difference);
         let event = new CustomEvent('updateObjective', {detail: target});
         window.dispatchEvent(event);
     };



    /**
     * Create a pieChart
     *
     * @param domId
     * @param labels
     * @param label_colors
     * @param activityData
     * @param activityDataVelocity
     * @returns {Chart}
     */
     createPieChart = (domId, labels, label_colors, activityData, activityDataVelocity) => {

        let ctx = $(domId);
        let data = {
            datasets: [{
                data: activityData,
                backgroundColor: label_colors
            }],
            labels: labels
        };

        return new Chart(ctx, {
            data: data,
            type: 'polarArea',
            options: {
                elements: {
                    arc: {
                        angle: activityDataVelocity,
                    }
                },
                responsive: true,
                maintainAspectRatio: false,
                legend: {
                    display: false
                },
                layout: {
                    padding: {
                        left: 0,
                        right: 0,
                        top: 10,
                        bottom: 0
                    }
                },
                animation: {
                    duration: 500
                },
                scale: {
                    display: true,

                    ticks: {
                        display: false,
                        min: 0,
                        max: 100,
                    },
                    gridLines:{
                        display: true,
                        color: '#d4d2ca',
                    },
                },
                tooltips: {
                    callbacks: {
                        label: function(tooltipItem, data) {
                            let dataset = data.datasets[tooltipItem.datasetIndex];
                            let currentValue = dataset.data[tooltipItem.index];
                            return ' ' + currentValue + '%';
                        },
                        title: function(tooltipItem, data) {
                            return data.labels[tooltipItem[0].index];
                        }
                    }
                },
            }
        });
    };


    /**
     * Update the UI (difference value)
     *
     * @param value
     */
    updateScoreEvolution = (value) => {
         if (value < 0) {
             $('#growth-caret').removeClass('green orange up right').addClass('red down');
             $('#score-difference').text(value);
         } else if (value === 0) {
             $('#growth-caret').removeClass('green red up down').addClass('orange right');
             $('#score-difference').text(value);
         } else {
             $('#growth-caret').removeClass('red orange down right').addClass('green up');
             $('#score-difference').text('+' + value);
         }

     };

    /**
     * Calculate the difference between the current score and the score of the last week
     *
     * @param scores
     * @param objective
     * @returns {number}
     */
     calculateScoreEvolution = (scores, objective) => {
         let currentScore = scores[Object.keys(scores)[0]][objective];
         let previousWeekScore = scores[Object.keys(scores)[6]][objective];

         return (currentScore - previousWeekScore);
     };
</script>

{% endblock %}